name: Check and Remove "Good to Merge" Label

on:
  pull_request:
    branches:
      - main  # Specify the branch you want to protect (e.g., `main`, `staging`)
    types: [labeled]  # Trigger on PR label changes, PR opened, etc.
  push:
    branches:
      - main  # Trigger on push to the `main` branch (or your target branch)
    paths:
      - '**/*'  # Trigger on any change in the repository

jobs:
  check-remove-label:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the PR branch (to avoid detached HEAD state)
      - name: Checkout PR branch
        uses: actions/checkout@v2
        # with:
        #   ref: ${{ github.head_ref }}  # Checkout the correct PR branch

      # - name: Print Data
      #   run: |
      #     echo "Found github event name: ${{ github.event_name }}"
      #     echo "Found github.event.action: ${{ github.event.action }}"


      # Step 2: Remove "Good to Merge" label when a commit is pushed
      # - name: Remove "Good to Merge" label from the PR
      #   if: contains(github.event.pull_request.labels.*.name, 'Good to Merge')
      #   # if: github.event_name == 'push'  # Run this step only for push events
      #   run: |
      #     # Get the PR associated with the commit
      #     PR_NUMBER=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls" \
      #       | jq '.[0].number')

      #     if [ -z "$PR_NUMBER" ]; then
      #       echo "No pull request found for this commit."
      #       exit 0
      #     fi

      #     echo "Found PR number: $PR_NUMBER"

      #     # Remove the "Good to Merge" label from the PR
      #     curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels/good%20to%20merge"

      #     echo "Removed 'Good to Merge' label from PR #$PR_NUMBER"

      # - name: Checkout PR branch
      #   uses: actions/checkout@v2

      # Step 3: Check for "Good to Merge" label when label is added to PR
      - name: Check for "Good to Merge" label
        if: github.event_name == 'pull_request' && github.event.action == 'labeled'  # Run only for PR events
        run: |
          # Fetch the PR labels
          PR_LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels")

          # Print the labels for debugging purposes
          echo "PR labels: $PR_LABELS"

          # Convert labels to lowercase and check for 'good to merge' label (case-insensitive check)
          PR_LABELS_LOWER=$(echo "$PR_LABELS" | tr '[:upper:]' '[:lower:]')

          if [[ "$PR_LABELS_LOWER" != *"good to merge"* ]]; then
            echo "PR does not have the 'Good to Merge' label, failing the workflow."
            exit 1  # Fail the job to block the merge
          else
            echo "PR has the 'Good to Merge' label, passing the workflow."
          fi

      # Remove this - Deleting artifacts
      - name: List and clean up artifacts
        if: always()
        run: |
          echo "Listing current artifacts for check-and-remove-label.yml..."
          runs=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/check-and-remove-label.yml/runs")

          # Debugging: Check the raw response
          # echo "Workflow run details:"
          # echo "$runs"

          # Parse the total count of workflow runs
          run_count=$(echo "$runs" | jq '.total_count // 0')

          # Check if run_count is not null or 0
          if [ "$run_count" -eq 0 ]; then
            echo "No workflow runs found for check-and-remove-label.yml. Exiting."
            exit 0
          fi

          echo "Total workflow runs: $run_count"

          # Set maximum number of artifacts to keep
          MAX_ARTIFACTS=2

          # Calculate how many to delete
          if [ "$run_count" -gt "$MAX_ARTIFACTS" ]; then
            to_delete=$((run_count - MAX_ARTIFACTS))
            echo "Will delete $to_delete oldest artifacts to maintain maximum of $MAX_ARTIFACTS"

            # Get IDs of oldest artifacts to delete
            artifact_ids=$(echo "$runs" | jq -r ".artifacts | sort_by(.created_at) | .[0:$to_delete] | .[].id")
            
            if [ -z "$artifact_ids" ]; then
              echo "No artifacts found to delete."
              exit 0
            fi

            # Delete each artifact
            for id in $artifact_ids; do
              echo "Deleting artifact ID: $id"
              curl -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id"
            done
          else
            echo "No cleanup needed. Current count ($run_count) is within the limit."
          fi

      # Remove this
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact  # Name of the artifact
          path: src/views/appA/AppA.js  # Path to the directory or file you want to upload
